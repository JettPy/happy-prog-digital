# Библиотека tkinter

# Модуль tkinter = это набор классов, функций и констант для работы с графическими оконными приложениями.
# Для работы подключим эту библиотеку и импортируем из нее все что есть (* - все):
from tkinter import *

# Для создания оконного приложения необходимо создать объект класса Tk - это главное окно программы:
window = Tk()
# Что бы настроить размеры окна можно использовать метод geometry. Он принимает значения в пикселях.
# Этот метод принимает строку, вида: <ширина>x<высота>.
# Можно также указать координату левого верхнего окна, для того что указать конкретное место появления окна:
# Для этого используется запись через знак "+": <ширина>x<высота>+<координата левого края>+<координата верхнего края>.
window.geometry("300x150+1000+250")
# Окну можно задать заголовок с помощью метода title:
window.title("Моя первая программа")
# Для настройки цвета фона и т.п. используется метод config. Этот метод принимает название атрибута,
# например bg(background "задний фон"), и затем через знак "=" указываем новое значение:
window.config(bg='#d5e89e')  # установка желто-салатового цвета

# Рассмотрим пару базовых виджетов.
# Виджет - элемент в приложении, который выполняет какую то задачу: текс, кнопка, поле ввода и т.д.

# Рассмотрим виджет текста: Label - он просто выводит текс в окне приложения.
# Структура такая:
# <название переменной> = Label(<куда вставляем>, text=<текст который выводим>, <ширина, высота, цвет и т.п.>)
label = Label(window, text="Текст", width=9, height=3)
# Ширина и высота задаются не в пикселях, а в количестве символов. Создадим еще несколько лейблов:
label1 = Label(window, text="Текст 1", width=9, height=3)
label2 = Label(window, text="Текст 2", width=9, height=3)
label3 = Label(window, text="Текст 3", width=9, height=3)
label4 = Label(window, text="Текст 4", width=9, height=3)

# Если вы сейчас запустите программу, то не увидите наших текстов.
# Им еще нужно указать расположение в окне, т.е. вмонтировать их.
# Для этого существует три способа:

# 1) Метод pack()
# Он просто размещает элемент в свободное место. По умолчанию сверху по центру:
# label.pack()

# 2) Метод place()
# Этот метод размещает элемент, так, что бы левый верхний угол был в переданных значениях x и y:
# label.place(x=15, y=15)

# 3) Метод grid()
# Этот метод позволяет размещать элементы по сетке (как в excel). Он принимает параметры row и column - номера строки
# и колонки соответственно (начиная с 0), а также например rowspan и columnspan - количество ячеек которые нужно занять:
label.grid(row=0, column=0)
label1.grid(row=1, column=0)
label2.grid(row=0, column=1)
label3.grid(row=1, column=1)
label4.grid(row=2, column=0, columnspan=2)  # последний лейбл занимает 2 ячейки

# Стоит обратить внимание, что ширина колонок или высота строк определяется максимальной высотой и шириной
# входящих в них элементов. Если же колонка или ряд будет пустая, то их ширина или длина будут равны нулю.

# И езе один полезный виджет - Button. Это обычная кнопка
# Структура такая:
# <название переменной> = Button(<куда вставляем>, text=<текст кнопки>,  command=<функция которая запускается при нажатии> ...)


# Далее нам понадобится функция, которая будет вызываться. Создадим ее:
def click():  # Эта функция будет менять ширину, текст и цвет букв (fg - foreground) у виджета label4
    label4.config(width=18, text='кнопка нажата', fg='red')


# Создадим кнопку:
button = Button(window, text='НАЖМИ НА МЕНЯ', command=click)
# Заметьте, что, при передаче функции в command мы не вызываем ее: click(), а указываем только имя функции click.
# А вызов этой функции произойдет самостоятельно, когда будет нажата кнопка
button.grid(row=0, column=2)  # размещаем кнопку

# Что бы программа не закрылась сразу, используется функция mainloop:
mainloop()

# Анимации в Canvas

# В этом уроке мы рассмотрим как слушать события нажатия клавиш и как реализовать по кадровую анимацию.

from tkinter import *


# Это функция перемещения. Она принимает координаты для перемещения x, y и счетчик кадров k.
def move(x, y, k):
    if k < 10:  # Если еще не отрисовалось 10 кадров, то выполняем отрисовку.
        canvas.move(ball, x, y)  # Перемещаем мяч на заданные координаты
        # Через 30 миллисекунд рекурсивно вызываем функцию перемещения, увеличивая счетчик кадров
        window.after(30, lambda: move(x, y, k + 1))


window = Tk()
window.config(bg='#b131e8', padx=20, pady=20)
canvas = Canvas(window, width=800, height=600)
canvas.pack()
ball = canvas.create_oval(30, 30, 70, 70, fill='red')

# Зададим слушатели событий нашему холсту. Для этого используется метод bind:
# <переменная холста>.bind(<имя клавиши>, <функция>)

# <Right> - стрелочка вправо
# <Left> - стрелочка влево
# <Up> - стрелочка вверх
# <Down> - стрелочка вниз

# В качестве функции передадим лямда функцию.
# Эта клавиша принимает 1 параметр - событие нажатия клавиш. Проигнорируем его.
# Далее в анонимной функции вызовем метод after. Этот метод принимает количество миллисекунд и функцию,
# которую надо вызвать через этот промежуток времени. Поскольку нам нужно вызвать функцию с аргументами,
# а метод after принимает только имя функции без вызова, то передадим в него еще одну анонимную функцию,
# которая в себе вызовит функцию перемещения move на заданные координаты.
canvas.bind('<Right>', lambda event: window.after(30, lambda: move(4, 0, 0)))
canvas.bind('<Left>', lambda event: window.after(30, lambda: move(-4, 0, 0)))
canvas.bind('<Up>', lambda event: window.after(30, lambda: move(0, -4, 0)))
canvas.bind('<Down>', lambda event: window.after(30, lambda: move(0, 4, 0)))

# Что бы позволить холсту отслеживать нажатие клавиш надо установить на него фокус.
# Для этого используется метод focus_set():
canvas.focus_set()
mainloop()
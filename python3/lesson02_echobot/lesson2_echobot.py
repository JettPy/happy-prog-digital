# На этом уроке мы с вами научимся создавать простого echo бота.
# Echo бот - это бот, который будет отвечать теми же сообщениями, что мы ему присылаем.

# Для начала нужно установить библиотеку для телеграмма с которой будем работать:
# pip install pyTelegramBotAPI

# Теперь мы можем импортировать библиотеку telebot:
import telebot

# Что бы создать бота ему надо передать токен.

# Токен - это строка содержащая символы. Токен можно считать ключом к вашему боту.
# Он является паролем к нашему боту. Его нельзя показывать другим людям.
# Имея токен можно управлять поведением бота.

# Для создания бота и получения его токена, необходимо обратится к главному боту телеграмма - @BotFather
# Отправьте ему команду: /newbot
# Далее введите имя вашего бота и потом его юзернэйм (тот что начинается со значка @, сам символ @ вводить не надо)
# Послле успешной регистрации он выдаст токен например: 6201918148:AAF9AvWh2MiOuWVwTPkQkU_zZ6-tcWyeiKg

# Вернемся к коду на Python.
# Токен можно хранить просто в коде как переменную:
# API_TOKEN = '6201918148:AAF9AvWh2MiOuWVwTPkQkU_zZ6-tcWyeiKg'

# Но такой способ не безопасен.
# Пароли, логины, токены и ключевые фразы обычно хранят в отдельном файле с расширением .env
# Этот файл называется переменными окружения. Этот файл никогда не храниться в удаленных хранилищах.

# Внутри файла .env добавите строку: API_TOKEN = "6201918148:AAF9AvWh2MiOuWVwTPkQkU_zZ6-tcWyeiKg"

# Для взаимодействия с переменными окружения потребуется установить специальную библиотеку python-dotenv:
# pip install python-dotenv

# Далее импортируем две библиотеки os и dotenv:
import os
import dotenv
# os - библиотека для взаимодействия с операционной системой
# dotenv - библиотека для работы с .env файлом

# Первым делом подгружаем переменные используя функцию dotenv.load_dotenv:
dotenv.load_dotenv()

# Переменные окружения работают по принципу словарей.
# С помощью функции os.getenv получим содержимое по ключу API_TOKEN:
API_TOKEN = os.getenv('API_TOKEN')


# Теперь переменная API_TOKEN содержит наш токен и сам токен хранится безопасно.

# В библиотеке telebot содержится класс TeleBot - класс для создания бота.
# В конструктор передадим ему токен:
bot = telebot.TeleBot(API_TOKEN)

# Теперь мы можем работать с нашим ботом и обрабатывать сообщения и команды.
# Для этого потребуется декоратор @bot.message_handler.
# 1) Обработка команд

# Для обработки команд в декоратор необходимо передать аргумент commands.
# Аргумент commands принимает список строк, где каждая строка это название команды.
# Например, так выглядит обработчик команды /help:
@bot.message_handler(commands=['help'])
def help(message):  # Это функция обработчик принимает объект message
    # message - это не просто сообщение. Это большой объект который помимо текста
    # хранит информацию о пользователе, чате и так далее

    # Что бы отправить сообщение у бота есть метод send_message:
    # <переменная бота>.send_message(<id чата или пользователя>, <текст сообщения>)
    # Этот метод отправляет сообщение пользователю лично или в чат в котором присутствует бот.
    bot.send_message(message.from_user.id, "Я эхо бот! Я повторю любую твою фразу)")

# Теперь по команде /help мы будем получать описание бота.

# 2) Обработка сообщений

# Для обработки сообщений в декоратор необходимо передать аргумент content_types.
# Аргумент content_types принимает список строк, где каждая строка это формат сообщения, (текст, видео, аудио).
# Например, так выглядит обработчик текстовых сообщений:
@bot.message_handler(content_types=['text'])
def text(message):
    # Объект message так же содержит всю информацию.
    # В этот раз используем метод ответа на сообщение reply_to:
    # <переменная бота>.reply_to(<объект сообщения>, <текст сообщения>)
    # В отличии от send_message, reply_to ссылается на все сообщение.
    bot.reply_to(message, message.text)

# Теперь бот будет пересылать наши же сообщения подобно эху.

# Наш чат не должен сразу завершать работу, а должен слушать входящие сообщения.
# Для этого используется метод infinity_polling:
bot.infinity_polling()

# Этот метод будет бесконечно слушать входящие сообщения, пока мы не закроем программу

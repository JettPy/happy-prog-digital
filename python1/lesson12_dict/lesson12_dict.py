# Словари dict

# Словари - это ассоциативные списки.
# Представьте что мы открываем словарь и хотим найти в нем описание какого то слова.
# Для этого мы открываем словарь и ищем описание по интересующему нас слову.
# Так и словари это такие списки, в которых в качестве индекса можно использовать слова, числа или другие значения

# Создать пустой словарь можно следующими способами:
empty_dict1 = {}
empty_dict2 = dict()

# Что бы создать словарь со значениями используется следующая конструкция:
# <словарь> = {<ключ1>: <значение1>, <ключ2>: <значение2>, ...}
# Ключи - это аналог индекса в списке
countries = {"Москва": "Россия", "Минск": "Белорусь", "Рига": "Латвия"}  # словарь городов, где ключ - это столица

# Обращение к элементу по ключу похоже на то как это делается в списке:
print(countries["Минск"])  # Вывод: Белорусь

# Есть еще один способ получить значение по ключу через метод get:
print(countries.get("Минск"))  # Вывод: Белорусь
# Так же этот метод позволяет проверить есть ли значение по этому ключу в списке. Если элемента нет вернет None:
print(countries.get("Вашингтон"))  # Вывод: None, такого ключа нет

# Что бы добавить элемент в словарь достаточно присвоить значение по новому ключу:
if countries.get("Вашингтон") is None:
    countries["Вашингтон"] = "США"
print(countries)  # Вывод: {'Москва': 'Россия', 'Минск': 'Белорусь', 'Рига': 'Латвия', 'Вашингтон': 'США'}

# Для удаления элемента можно воспользоваться оператором del. Он удаляет переменную из памяти:
del countries["Вашингтон"]
# Или воспользоваться методом pop:
val = countries.pop("Рига")  # pop так же возвращает значение удаленного элемента
print(val)  # Вывод: Латвия
print(countries)  # Вывод: {'Москва': 'Россия', 'Минск': 'Белорусь'}

# Что бы узнать количество элементов можно использовать функцию len:
print(len(countries))  # Вывод: 2

# Рассмотрим еще несколько полезных методов у словаря:
# 1) values() - возвращает список значений словаря в формате dict_values (этот формат лучше превратить в обычный список)
print(list(countries.values()))  # Вывод: ['Россия', 'Белорусь']

# 2) keys() - возвращает список ключей словаря в формате dict_keys (этот формат лучше превратить в обычный список)
print(list(countries.keys()))  # Вывод: ['Москва', 'Минск']

# 3) items() - возвращает список пар ключ, значение словаря в формате dict_items
# (этот формат тоже лучше превратить в обычный список)
print(list(countries.items()))  # Вывод: [('Москва', 'Россия'), ('Минск', 'Белорусь')]

# Например, так можно перебирать в цикле сразу и ключи и значения:
for key, value in countries . items():
    print(f"Столица {value} - {key}")


# Словарь можно, например, использовать, когда у нас есть неотсортированный список чисел, в котором нам надо найти
# пару чисел, равные заданному числу:
def find_elements(elements_list, summa):
    d = {}  # создаем пустой словарь
    for element in elements_list:  # в цикле перебираем числа
        if d.get(element) is None:  # если в словаре нет значения по ключу равному текущему элементу
            d[summa - element] = element  # то записываем элемент в значение словаря, где ключом, недостающее число
        else:
            return element, d[element]  # если такой ключ имеется, то возвращаю элемент и значение из словаря


print(find_elements([10, 1, 5, 2, 8, 3, 9, 23], 4))  # Вывод: (3, 1)

# Задание 1: Мы заказываем товары на склад. Курьер приезжает n раз с каким то товаром и его количеством.
# Требуется вывести какие товары имеются на складе и сколько их.

# Пример ввода:
# 5
# apple 4
# banana 3
# coffe 2
# banana 1
# apple 3

# Пример вывода:
# {'apple': 7, 'banana': 4, 'coffe': 2}


store = {}
n = int(input())
for _ in range(n):
    name, count = input().split()
    count = int(count)
    if store.get(name) is not None:
        store[name] += count
    else:
        store[name] = count
print(store)

# Списки list

# Часто необходимо хранить несколько значений в одной переменной.
# Например, у нас есть интернет магазин, где есть товары. Их покупают, привозят новые и так далее

# Для решения подобных задач используются списки.
# Список(или массив) - это такой тип данных, который может хранить в себе разные значения. Доступ к
# элементам которого осуществляется по индексу.

# Например, у нас есть числа:
a1 = 1
a2 = 3
a3 = 5

# Намного удобнее использовать список:
a = [1, 3, 5]
print(a)  # Вывод: [1, 3, 5]

# Теперь к каждому элементу можно обращаться по индексу:
print(a[1])  # Вывод: 3 (индексация начинается с 0)

# Что бы создать пустой список достаточно использовать пустые скобки []:
b = []
print(b)  # Вывод: []

# Что бы узнать длину или же размер списка можно использовать функцию len():
print(len(a))  # Вывод: 3

# Можно создавать списки используя функцию list(), например из строки:
print(list("hello"))  # Вывод: ['h', 'e', 'l', 'l', 'o']

# Моно создавать списки генераторами списков. Синтаксис такой:
# <имя списка> = [<что сделать с каждым элементом> for <элемент> in <список, строка или все что имеет индексацию>]
generated_list = [x * 3 for x in 'list']
print(generated_list)  # Вывод: ['lll', 'iii', 'sss', 'ttt']

# Списки как и строки поддерживают срезы:
l = [11, 13, 17, 23, 25, 43, 57]
print(l[3:5])     # [23, 25]
print(l[2:-2])    # [17, 23, 25]
print(l[:6])      # [11, 13, 17, 23, 25, 43]
print(l[1:])      # [13, 17, 23, 25, 43, 57]
print(l[:])       # [11, 13, 17, 23, 25, 43, 57] (копирование)
print(l[::-1])    # [57, 43, 25, 23, 17, 13, 11] (переворачивание списка)
print(l[2::2])    # [17, 25, 57]

# Особенность списков в python в том что он хранит не сами значения, а ссылки на них.
# Эта особенность позволяет хранить разные типы данных в одном списке:
c = [4, "hello", 3.14, True]
print(c)  # Вывод: [4, 'hello', 3.14, True]

# Но в этом кроется и проблема. Допустим есть следующий список:
list1 = [1, 2, 3, 4]
# и нам нужно его копировать:
list2 = list1
# И вот мы вносим изменения в первый список:
list1[3] = 10
print(list1)  # Вывод: [1, 2, 3, 10]
print(list2)  # Вывод: [1, 2, 3, 10] почему изменился второй список? Мы его не трогали!

# Дело опять же в ссылках, мы заменили значение по ссылке, а сама ссылка осталась та же.
# Что бы поменялся только один список, надо использовать копирование методом copy():
list1 = [1, 2, 3, 4]
list2 = list1.copy()
list1[3] = 10
print(list1)  # Вывод: [1, 2, 3, 10]
print(list2)  # Вывод: [1, 2, 3, 4] теперь все правильно. При копировании создались новые значения.

# В списки можно добавлять новые значения с помощью метода append(<значение>):
my_list = [1, 2]
my_list.append(3)
print(my_list)  # Вывод: [1, 2, 3]

# Можно объединять списки методом extend(<другой список>):
my_list.extend([4, 5])
print(my_list)  # Вывод: [1, 2, 3, 4, 5]
# Или обычным сложением:
print(my_list + [6, 7])  # Вывод: [1, 2, 3, 4, 5, 6, 7]

# Есть возможность вставки элемента в определенную позицию с помощью insert(<индекс>, <значение>):
my_list.insert(2, 'x')  # вставляем символ "x" во вторую позицию
print(my_list)  # Вывод: [1, 2, 'x', 3, 4, 5]

# Для удаления можно использовать два метода:
# 1) Метод remove(<значение>) - удаляет первый элемент в списке, с переданным значением,
# если такого элемента не существует, будет ошибка ValueError:
my_list.remove('x')  # удаляем "x"
print(my_list)  # Вывод: [1, 2, 3, 4, 5]
try:
    my_list.remove('a')
except ValueError:
    print("Ошибка! Такого значения нет")

# 2) Метод pop(<индекс>) - удаляет элемент по переданному индексу, если индекс не указан, то удаляет последний элемент.
# Этот метод возвращает значение удаленного элемента:
my_list.pop()  # Удаляем последний элемент
element = my_list.pop(2)  # удаляем элемент с индексом 2 и сохраняем значение элемента
print(my_list)  # Вывод: [1, 2, 4]
print(element)  # Вывод: 3

# Поиск элемента
# Метод index() - возвращает индекс первого совпадения или выдает ошибку ValueError:
print(my_list.index(4))  # Вывод: 2
try:
    print(my_list.index(0))
except ValueError:
    print('Индекса нет')

# Метод count(<значение>) - возвращает количество элементов с переданным значением:
print([1, 2, 1, 3, 1].count(1))  # Вывод: 3

# Метод reverse() - разворачивает список:
reversed_list = [1, 2, 3, 4, 5]
reversed_list.reverse()
print(reversed_list)  # Вывод: [5, 4, 3, 2, 1]

# Что бы очистить список можно использовать метод clear():
print(my_list)  # Вывод: [1, 2, 4]
my_list.clear()
print(my_list)  # Вывод: []

# Задание 1:
# Дан список чисел. Вывести эти числа и к каждому написать четное оно или нечетное.
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for i in range(len(nums)):
    print(nums[i], end=' ')
    if nums[i] % 2 == 1:
        print('нечетное')
    else:
        print('четное')

# Или можно так:
for num in nums:
    print(num, end=' ')
    if num % 2 == 1:
        print('нечетное')
    else:
        print('четное')

# Задание 2:
# Ввести с клавиатуры число n. Создать список квадратов чисел от 0 до n.
# n = int(input('> '))
n = 9
result = []
for i in range(1, n + 1):
    result.append(i**2)
print(result)

# Или можно так:
result = [x**2 for x in range(1, n + 1)]
print(result)

# Множества set

# В математике вы могли столкнуться со множествами чисел, таких как целые, натуральные, вещественные и так далее.
# Множества - это такие наборы элементов, которые не повторяются. Рассмотрим на примере:
# например число 2023 состоит из трех уникальных цифр: 0, 2, 3

# Множества в python можно записать через фигурные скобочки:
my_set = {2, 0, 2, 3}
print(my_set)  # Вывод: {0, 2, 3}
print(type(my_set))  # Вывод: <class 'set'>

# Что бы задать пустое множество мы не можем записать {} - так как это создаст словарь dict.
# Поэтому множество задается с помощью функции set:
empty_set = set()
print(empty_set)  # Вывод: set()

# Можно создавать множества на основе списков и строк:

set1 = set([2, 1, 2, 3, 4, 4])
set2 = set("Hello world")
print(set1)  # Вывод: {1, 2, 3, 4}
print(set2)  # Вывод: {'d', 'H', 'w', ' ', 'r', 'e', 'o', 'l'}

# Что бы узнать длину можно использовать функцию len:
print(len(set2))  # Вывод: 8

# Добавлять элементы можно с помощью add:
super_set = {1, 2, 3}
super_set.add(4)
super_set.add(3)  # так как 3 уже есть, то эта функция не добавит новое значение
print(super_set)  # Вывод: {1, 2, 3, 4}
# или можно добавлять сразу несколько значений через update:
super_set.update([5, 6])
print(super_set)  # Вывод: {1, 2, 3, 4, 5, 6}

# для удаления существует несколько методов:
# 1) метод discard(<значение>) - удаляет элемент из множества, если такой элемент есть, или не трогает множества:
super_set.discard(7)  # 7 нет в множестве, ничего не произойдет
super_set.discard(6)
print(super_set)  # Вывод: {1, 2, 3, 4, 5}

# 2) remove(<элемент>) - работает как discard, только выдаст ошибку если нет такого элемента:
try:
    super_set.remove(6)
except KeyError:
    print("Ошибка такого элемента нет!")
super_set.remove(5)
print(super_set)  # Вывод: {1, 2, 3, 4}

# 3) метод pop - удаляет последний элемент, но элементы в множестве не упорядочены, поэтому мы не можем точно знать
# какой элемент будет удален. pop - возвращает значение элемента которое было удалено:
element = super_set.pop()
print(element)  # Вывод: 1
print(super_set)  # Вывод: {2, 3, 4}

# По множеству можно пройтись используя цикл for:
for element in super_set:
    print(element, end=' ')  # Вывод: 2 3 4
print()

# Особые методы множеств.
# Как известно из уроков информатики можно находить пересечения множеств, объединение и так далее. Так же и в python:

a_set = {1, 2, 3, 4, 5}
b_set = {4, 5, 6, 7, 8}

# 1) объединение - union: Все элементы из обоих множеств объединяются в одно
print(a_set | b_set)
print(a_set.union(b_set))  # Оба варианта вернут {1, 2, 3, 4, 5, 6, 7, 8}

# 2) пересечение - intersection: объединяет множество только по общим элементам
print(a_set & b_set)
print(a_set.intersection(b_set))  # Оба варианта вернут {4, 5}

# 3) разность - difference: оставляет во множестве только уникальные значение левого множества
print(a_set - b_set)
print(a_set.difference(b_set))  # Оба варианта вернут {1, 2, 3}

# 4) симметричная разность - symmetric difference: формирует множество только из уникальных элементов обоих множеств
print(a_set ^ b_set)
print(a_set.symmetric_difference(b_set))  # Оба варианта вернут {1, 2, 3, 6, 7, 8}

# Множества можно сравнивать:
# < - левое множество является подмножеством правого
# > - правое множество является подмножеством левого
# <= - левое множество является подмножеством правого либо они состоят из одних и тех же элементов
# >= - правое множество является подмножеством левого либо они состоят из одних и тех же элементов
# == - множества состоят из одних и тех же элементов
# != - множества отличаются набором элементов
print({1, 2, 3} < {1, 2, 3, 4, 5})  # Вывод: True
print({1, 2, 3} >= {1, 2, 3})  # Вывод: True
print({1, 2, 3} == {1, 2, 3, 4})  # Вывод: False

# Задание 1: Напишите программу для удаления заданного числа из набора.
my_set = {1,2,3,4,5,6,12,24}
n = int(input("> "))
my_set.discard(n)
print(my_set)

# Задание 2: если количество различных символов в имени пользователя нечетное, тогда пользователь мужского пола,
# иначе — женского. Вам дана строка, обозначающая имя пользователя, помогите нашему герою определить по ней пол
# пользователя по описанному методу. Если пользователь оказался женского пола по методу нашего героя, выведите
# «CHAT WITH HER!» (без кавычек), иначе, выведите «IGNORE HIM!» (без кавычек).
print("IGNORE HIM!" if len(set(input())) % 2 else "CHAT WITH HER!")

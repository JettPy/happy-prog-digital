# Цикл for

# Часто такое случается, что нам необходимо повторить какую то команду или набор команд некоторое количество раз.
# Вместо того что бы повторять одну и ту же команду много раз можно использовать цикл.
# Цикл - это повторение команд.

# Рассмотрим цикл с заданным количеством перечислений for.
# Записывается он так:
# for <переменная счетчик> in <диапазон значений>:
#     <тело>

# Для диапазона значений чаще всего используется функция range. У нее есть 3 варианта создания диапазона:

# 1) range(<конец>)
# Создает диапазон от 0 до конечного числа, последнее число не входит в диапазон
print('Цикл от 0 до 5:')
for i in range(5):
    print(i, end=' ')  # обратите внимание, что тело цикла отделятся отступом слева
print()  # пустой print для отступа

# 2) range(<начало>, <конец>)
# Cоздает такой же диапазон, но что и в 1 случае, только начальное значение задается отдельным параметром
print('Цикл от 5 до 10:')
for i in range(5, 10):
    print(i, end=' ')
print()  # пустой print для отступа

# 3) range(<начало>, <конец>, <шаг>)
# Cоздает такой же диапазон, но что и в 2 случае, но теперь задается еще и шаг (на сколько увеличивается число),
# по умолчанию шаг равен 1
print('Цикл от 10 до 100 с шагом 10:')
for i in range(10, 100, 10):
    print(i, end=' ')
print()  # пустой print для отступа

# Если задать шаг отрицательным, то тогда можно перебирать значения от большего к меньшему
print('Цикл от 10 до 0 c шагом -2:')
for i in range(10, 0, -2):
    print(i, end=' ')
print()  # пустой print для отступа

# Для циклов есть 2 специальные команды:
# 1) continue - немедленно закачивает выполнение тела цикла и переходит к следующему этапу цикла:
for i in range(10):  # цикл выведет только все четные числа
    if i % 2 == 1:
        continue
    print(f'i = {i}, в цикле с continue')

# 2) break - немедленно завершает выполнение всего цикла:
for i in range(10):  # цикл выведет все числа до 5 и завершится, несмотря на то, что счетчик не дошел до конца
    if i == 5:
        break
    print(f'i = {i}, в цикле с break')

# Задача 1:
# Ввести число n с клавиатуры. Написать цикл, который будет выводить числа от 1 до n и писать четное оно или нет.
n = int(input('n > '))
for i in range(1, n + 1):
    if i % 2 == 1:
        print(i, 'нечетное')
    else:
        print(i, 'четное')

# Задача 2:
# Ввести 5 чисел и найти их сумму
summa = 0
for i in range(5):
    num = int(input(f'{i + 1} > '))
    summa += num
print(summa)

# Еще немного дополнительно о циклах:
# Есть еще несколько способов создания диапазонов.
# Если в переменной можно использовать индексы (строки и списки и т.п.) можно пройтись сразу по этой переменной:

num_list = [2, 8, 3, 9, 5]
string = "abcdf"

for num in num_list:  # в таком случае в качестве счетчика выступают элементы списка
    print(num, end=' ')  # вывод: 2 8 3 9 5
print()

for sym in string:  # в таком случае в качестве счетчика выступают символы в строке
    print(sym, end=' ')  # вывод: a b c d f
print()

# Есть функция, которая позволяет получить в счетчик сразу и индекс и значение: функция enumerate
for i, sym in enumerate(string):  # на каждом шаге получаем индекс элемента и его значение
    print(f'{sym} имеет индекс {i}')
# Вывод:
# a имеет индекс 0
# b имеет индекс 1
# c имеет индекс 2
# d имеет индекс 3
# f имеет индекс 4

# И последняя функция: zip. Она позволяет за один цикл сразу проходить по нескольким переменным:
for sym, num in zip(string, num_list):  # на каждом шаге получаем следующий элемент из всех переменных
    print(sym, num)  # Так как в zip две переменные, то и счетчика будет тоже два
# Вывод:
# a 2
# b 8
# c 3
# d 9
# f 5

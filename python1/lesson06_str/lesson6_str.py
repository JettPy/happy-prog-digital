# Строки str

# В этом уроке рассмотрим подробнее строки. Строки - это текстовый тип данных.

# Строки задаются кавычками тремя способами:
str1 = "Hello world!"  # используя двойные кавычки
str2 = 'Hello world!'  # используя одинарные кавычки
# используя двойные или одинарные кавычки три раза мы создаем многострочную строку, в которой можно переносить текст:
str3 = """Hello 
world!"""
print(str1)
print(str2)
print(str3)

# Строки могут быть пустые:
str_empty = ""

# Что бы узнать длину строки можно использовать функцию len:
print(len('length'))  # Вывод: 6

# К каждому символу в строке можно обращаться по индексу(номеру) используя скобки []:
word = "python 3"
print(word[1])  # Вывод: y

# Как видно из примера, индекс 1 соответствует второй букве, индексация начинается с 0

# А если использовать отрицательные индексы, то можно получать буквы с конца
print(word[-1])  # Вывод: 3

# | p | y | t | h | o | n |   | 3 | # пробел - тоже символ
# | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | # прямой индекс
# |-8 |-7 |-6 |-5 |-4 |-3 |-2 |-1 | # обратный индекс

# Поэтому буквы можно перебегать в цикле:
for i in range(len(word)):
    print(word[i], end=',')  # Вывод: p,y,t,h,o,n, ,3,
print()

# Или если индекс не важен:
for letter in word:
    print(letter, end=',')  # Вывод: p,y,t,h,o,n, ,3,
print()

# Важное правило - строки неизменяемы, это значит что мы не можем поменять символ строке:
try:
    word[6] = '-'  # Тут будет ошибка TypeError
except TypeError:
    print('Ошибка, нельзя изменять строки')

# Все операции которые можно проводить над строками связаны либо с их чтением, либо с
# созданием новых строк на основе других строк

# Срезы - это извлечение подстроки из исходной строки.
# Запись среза похож на индекс: [<откуда>:<до куда>:<шаг(опционально)>]:
s = 'spameggs'
print(s[3:5])     # me
print(s[2:-2])    # ameg
print(s[:6])      # spameg
print(s[1:])      # pameggs
print(s[:])       # spameggs (копирование)
print(s[::-1])    # sggemaps (переворачивание строки)
print(s[2::2])    # aeg

# Строки можно складывать и умножать на число:
print("Hello" + "Hello")  # Вывод: HelloHello
print("Hello" * 3)  # Вывод: HelloHelloHello (умножение = повторение)

# Важные методы строк

# Поиск символа или подстроки:
string = "abacb"
# Метод find() - возвращает индекс первого совпадения или -1 если не найдено:
print(string.find('b'))  # Вывод: 1
print(string.find('d'))  # Вывод: -1
# Метод rfind() - работает как find, но ищет с конца:
print(string.rfind('b'))  # Вывод: 4
print(string.rfind('d'))  # Вывод: -1
# Метод index() - возвращает индекс первого совпадения или выдает ошибку ValueError:
print(string.index('b'))  # Вывод: 1
try:
    print(string.index('d'))
except ValueError:
    print('Индекса нет')
# Метод rindex() - работает как index, но ищет с конца:
print(string.rindex('b'))  # Вывод: 4
try:
    print(string.rindex('d'))
except ValueError:
    print('Индекса нет')

# Замена символов - метод replace(<что меняем>, <на что меняем>)
date = "20.12.2020"
print(date.replace(".", "/"))  # Вывод: 20/12/2020

# Разделение и склеивание строк
# Метод split(<разделитель>) - разделяет строку по разделителю и возвращает список строк:
date_list = date.split('.')
print(date_list)  # Вывод: ['20', '12', '2020']
# Метод <разделитель>.join(<список строк>) объединяет строки через разделитель:
print('-'.join(date_list))  # Вывод: 20-12-2020

# Регистр букв
hello = "Hello, World!"
# Метод lower() приводит строку к нижнему регистру:
print(hello.lower())  # Вывод: hello, world!
# Метод upper() приводит строку к верхнему регистру:
print(hello.upper())  # Вывод: HELLO, WORLD!

# Коды символов
# Все символы кодируются определенным числом в компьютере
# Что бы узнать код символа используется функция ord():
print(ord('A'))  # Вывод: 65
# Обратная же операция - функция chr():
print(chr(67))  # Вывод: C

# Символы, которые нельзя увидеть, такие символы как табуляция или перенос строки обозначаются особыми символами
# через обратный слэш: \t - табуляция, \n - перенос строки и т.п.
# Сам же символ обратного слэша можно вывести как \\. Также если есть символы, которые синтаксически разрывают строку
# тоже можно экранировать: \" и \'
print("\tHello\"User\"!\nNice to meet you!")

# методы которые возвращают True / False:
print('123'.isdigit())  # Строка состоит из чисел?
print('abc'.isalpha())  # Строка состоит из букв?
print('1a4'.isalnum())  # Строка состоит из букв или чисел?
print('abc'.islower())  # Строка состоит из строчных букв?
print('ABC'.isupper())  # Строка состоит из заглавных букв?
print('\n '.isspace())  # Строка состоит из пробельных символов?

# Задание 1:
# Ввести число n с клавиатуры, создать строку из чисело от 0 до n:
# n = int(input('> '))
n = 7
answer = ""
for i in range(n + 1):
    answer += str(i)
print(answer)

# или упрощенно:
print(''.join([str(x) for x in range(n + 1)]))

# Задание 2:
# Определить является ли слово палиндромом:
# word = input()
word = "Aboba"
for i in range(len(word)):
    j = len(word) - i - 1
    if i > j:
        print("Это палиндром")
        break
    elif word[i].lower() != word[j].lower():
        print("Это не палиндром")
        break

# Или упрощенно:
print("Это палиндром" if word.lower() == word.lower()[::-1] else "Это не палиндром")
